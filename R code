#Alpha diversity
setwd("D:/Dropbox/Purdue Class from 2020/2022 Spring ANSC 595 Microbiome/Project Assignment/7/core-metrics-results-day22")


list.files()

if(!dir.exists("output"))
  dir.create("output")


if (!requireNamespace("devtools", quietly = TRUE)){install.packages("devtools")}
devtools::install_github("jbisanz/qiime2R") 
# current version is 0.99.20

Sys.setenv(LANGUAGE="en")
library(tidyverse)
library(qiime2R)
library(ggpubr)
library(dplyr)
library(ggplot2)

Sys.setenv(LANGUAGE="en")



meta<-read_q2metadata("2021-31_metadata_ver.3.1.txt")

list.files()

evenness = read_qza("evenness_vector.qza")
evenness<-evenness$data %>% rownames_to_column("SampleID") # this moves the sample names to a new column that matches the metadata and allows them to be merged

observed_features = read_qza("observed_features_vector.qza")
observed_features<-observed_features$data %>% rownames_to_column("SampleID") # this moves the sample names to a new column that matches the metadata and allows them to be merged

shannon = read_qza("shannon_vector.qza")
shannon<-shannon$data %>% rownames_to_column("SampleID") # this moves the sample names to a new column that matches the metadata and allows them to be merged

faith_pd = read_qza("faith_pd_vector.qza")
faith_pd<-faith_pd$data %>% rownames_to_column("SampleID") # this moves the sample names to a new column that matches the metadata and allows them to be merged\

###Alpha Diversity tables
# These tables will be merged for convenience and added to the 
# metadata table as the original tutorial was organized.

alpha_diversity = merge(x=faith_pd, y=evenness, by.x = "SampleID", by.y = "SampleID")
alpha_diversity = merge(alpha_diversity, observed_features, by.x = "SampleID", by.y = "SampleID")
alpha_diversity = merge(alpha_diversity, shannon, by.x = "SampleID", by.y = "SampleID")

meta = merge(meta, alpha_diversity, by.x = "SampleID", by.y = "SampleID")


row.names(meta) <- meta$SampleID

#Plots
hist(meta$shannon_entrophy, main="Shannon diversity", xlab="", breaks=10)
hist(meta$faith_pd, main="Faith phylogenetic diversity", xlab="", breaks=10)
hist(meta$pielou_e, main="Evenness", xlab="", breaks=10)
hist(as.numeric(meta$observed_features), main="Observed Features", xlab="", breaks=10)

shapiro.test(meta$shannon_entropy)
shapiro.test(meta$pielou_e)
shapiro.test(meta$faith_pd)
shapiro.test(meta$observed_features)

aov.shannon_entropy = aov(shannon_entropy ~ as.factor(diet), data=meta)
summary(aov.shannon_entropy)
TukeyHSD(aov.shannon_entropy)



#Plot
body_colors <- c("Red", "Blue", "Green")

# Now, the above graph is kind of not correct. Our test and our graphic do not exactly match. ANOVA and Tukey are tests based on the mean, but the boxplot plots the median. Its not wrong, its just not the best method. Unfortunately plotting the average and standard deviation is a little complicated.

# Order the diets
meta$diet = factor(meta$diet, c("Normal CP", "High-indigestible CP", "High CP"))



# Shannon
shannon_summary <- meta %>% # the names of the new data frame and the data frame to be summarised
  group_by(diet) %>%   # the grouping variable
  summarise(mean_shannon = mean(shannon_entropy),  # calculates the mean of each group
            sd_shannon = sd(shannon_entropy), # calculates the standard deviation of each group
            n_shannon = n(),  # calculates the sample size per group
            se_shannon = sd(shannon_entropy)/sqrt(n())) # calculates the standard error of each group

shannon_se <- ggplot(shannon_summary, aes(diet, mean_shannon, fill = diet)) + 
  geom_col() + 
  geom_errorbar(aes(ymin = mean_shannon - se_shannon, ymax = mean_shannon + se_shannon), width=0.2) + 
  theme_q2r() +
  theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)) +
  theme(legend.title = element_blank()) +
  labs(y="Shannon index", x = "") 

shannon_se
ggsave("output/shannon.png", shannon_se, height = 3, width = 3)

# Pielou's evenness
  evenness_summary <- meta %>% # the names of the new data frame and the data frame to be summarised
    group_by(diet) %>%   # the grouping variable
    summarise(mean_evenness = mean(pielou_evenness),  # calculates the mean of each group
              sd_evenness = sd(pielou_evenness), # calculates the standard deviation of each group
              n_evenness = n(),  # calculates the sample size per group
              se_evenness = sd(pielou_evenness)/sqrt(n())) # calculates the standard error of each group
  
  pielou_evenness_se <- ggplot(evenness_summary, aes(diet, mean_evenness, fill = diet)) + 
    geom_col() + 
    geom_errorbar(aes(ymin = mean_evenness - se_evenness, ymax = mean_evenness + se_evenness), width=0.2) + 
    theme_q2r() +
    theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)) +
    theme(legend.title = element_blank()) +
    labs(y="Pielou's evenness", x = "") 
  
ggsave("output/pielou_evenness.png", pielou_evenness_se, height = 3, width = 3)
  
  
  
  # observed_features
observed_features_summary <- meta %>% # the names of the new data frame and the data frame to be summarised
  group_by(diet) %>%   # the grouping variable
  summarise(mean_observed_features = mean(observed_features),  # calculates the mean of each group
            sd_observed_features = sd(observed_features), # calculates the standard deviation of each group
            n_observed_features = n(),  # calculates the sample size per group
            se_observed_features = sd(observed_features)/sqrt(n())) # calculates the standard error of each group

observed_features_se <- ggplot(observed_features_summary, aes(diet, mean_observed_features, fill = diet)) + 
  geom_col() + 
  geom_errorbar(aes(ymin = mean_observed_features - se_observed_features, ymax = mean_observed_features + se_observed_features), width=0.2) + 
  theme_q2r() +
  theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)) +
  theme(legend.title = element_blank()) +
  labs(y="Observed features", x = "") 

ggsave("output/observed_features.png", observed_features_se, height = 3, width = 3)


  # faith_pd
faith_pd_summary <- meta %>% # the names of the new data frame and the data frame to be summarised
  group_by(diet) %>%   # the grouping variable
  summarise(mean_faith_pd = mean(faith_pd),  # calculates the mean of each group
            sd_faith_pd = sd(faith_pd), # calculates the standard deviation of each group
            n_faith_pd = n(),  # calculates the sample size per group
            se_faith_pd = sd(faith_pd)/sqrt(n())) # calculates the standard error of each group

faith_pd_se <- ggplot(faith_pd_summary, aes(diet, mean_faith_pd, fill = diet)) + 
  geom_col() + 
  geom_errorbar(aes(ymin = mean_faith_pd - se_faith_pd, ymax = mean_faith_pd + se_faith_pd), width=0.2) + 
  theme_q2r() +
  theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)) +
  theme(legend.title = element_blank()) +
  labs(y="Faith pd", x = "") 
ggsave("output/Faith pd.png", faith_pd_se, height = 3, width = 3)


  faith_pd_summary <- meta %>% # the names of the new data frame and the data frame to be summarised
    group_by(diet) %>%   # the grouping variable
    summarise(mean_faith_pd = mean(faith_pd))
  
  faith_pd_se <- ggplot(faith_pd_summary, aes(diet, mean_faith_pd, fill = diet)) + 
    geom_col() + 
    theme_q2r() +
    theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)) +
    theme(legend.title = element_blank()) +
    labs(y="Faith pd", x = "") 
  
  faith_pd_se
  ggsave("output/faith_pd.png", faith_pd_se, height = 3, width = 3)
  
    
#Beta-diversity  
library(qiime2R)

library(tidyverse)

setwd("D:/Dropbox/Purdue Class from 2020/2022 Spring ANSC 595 Microbiome/Project Assignment/7/core-metrics-results-day22")

list.files()

if(!dir.exists("output"))
  dir.create("output")

metadata<-read_q2metadata("2021-31_metadata_ver.3.1.txt")

str(metadata)
levels(metadata$`diet`)

row.names(metadata) <- metadata[ ,1]
row.names(metadata) <- metadata$SampleID

bc_PCoA<-read_qza("bray_curtis_pcoa_results.qza")

body_colors <- c("Red", "Blue", "Green", "Gray")

bc_meta <- bc_PCoA$data$Vectors %>%
  select(SampleID, PC1, PC2) %>%
  inner_join(metadata, by = c("SampleID" = "SampleID"))

my_column <- "diet"

ggplot(bc_meta, aes(x=PC1, y=PC2, color=get(my_column))) +
  geom_point() + #alpha controls transparency and helps when points are overlapping
  #geom_point(data=centroids, size = 3) +
  theme_q2r() +
  stat_ellipse(level = 0.95, type = "t") +
  xlab(paste0("PC1 (", round(100*bc_PCoA$data$ProportionExplained[1], digits = 2), "%)")) +
  ylab(paste0("PC2 (", round(100*bc_PCoA$data$ProportionExplained[2], digits = 2), "%)")) +
  scale_color_manual(values=body_colors, name = my_column)
ggsave(paste0("output/BC-ellipse_", my_column,".png"), height=3, width=4.5, device="png") # save a PDF 3 inches by 4 inches


##SAME thing but with weighted UniFrac
list.files()
Wuni_PCoA<-read_qza("weighted_unifrac_pcoa_results.qza")

Wuni_meta <- Wuni_PCoA$data$Vectors %>%
  select(SampleID, PC1, PC2) %>%
  inner_join(metadata, by = c("SampleID" = "SampleID"))

ggplot(Wuni_meta, aes(x=PC1, y=PC2, color=get(my_column))) +
  geom_point()+
  theme_q2r() +
  stat_ellipse(level = 0.95, type = "t") +
  xlab(paste0("PC1 (", round(100*Wuni_PCoA$data$ProportionExplained[1], digits = 2), "%)")) +
  ylab(paste0("PC2 (", round(100*Wuni_PCoA$data$ProportionExplained[2], digits = 2), "%)")) +
  scale_color_manual(values=body_colors, name = "diet")
ggsave(paste0("output/Wuni-ellipse_", my_column,".png"), height=3, width=4.5, device="png") # save a PDF 3 inches by 4 inches


##SAME thing but with unweighted UniFrac
list.files()
UnWuni_PCoA<-read_qza("unweighted_unifrac_pcoa_results.qza")

UnWuni_meta <- UnWuni_PCoA$data$Vectors %>%
  select(SampleID, PC1, PC2) %>%
  inner_join(metadata, by = c("SampleID" = "SampleID"))

ggplot(UnWuni_meta, aes(x=PC1, y=PC2, color=get(my_column))) +
  geom_point()+
  theme_q2r() +
  stat_ellipse(level = 0.95, type = "t") +
  xlab(paste0("PC1 (", round(100*UnWuni_PCoA$data$ProportionExplained[1], digits = 2), "%)")) +
  ylab(paste0("PC2 (", round(100*UnWuni_PCoA$data$ProportionExplained[2], digits = 2), "%)")) +
  scale_color_manual(values=body_colors, name = "diet")
ggsave(paste0("output/UnWuni-ellipse_", my_column,".png"), height=3, width=4.5, device="png") # save a PDF 3 inches by 4 inches


##SAME thing but with Jaccard 
list.files()
jaccard_PCoA<-read_qza("jaccard_pcoa_results.qza")

jaccard_meta <- jaccard_PCoA$data$Vectors %>%
  select(SampleID, PC1, PC2) %>%
  inner_join(metadata, by = c("SampleID" = "SampleID"))

ggplot(jaccard_meta, aes(x=PC1, y=PC2, color=get(my_column))) +
  geom_point()+
  theme_q2r() +
  stat_ellipse(level = 0.95, type = "t") +
  xlab(paste0("PC1 (", round(100*jaccard_PCoA$data$ProportionExplained[1], digits = 2), "%)")) +
  ylab(paste0("PC2 (", round(100*jaccard_PCoA$data$ProportionExplained[2], digits = 2), "%)")) +
  scale_color_manual(values=body_colors, name = "diet")
ggsave(paste0("output/jaccard-ellipse_", my_column,".png"), height=3, width=4.5, device="png") # save a PDF 3 inches by 4 inches

#Taxa plot and Deseq2
## This script goes through making a taxa bar plot and then running
## DESeq2 to find differentially abundant ASVs


# for help installing phyloseq, see this website
# https://bioconductor.org/packages/release/bioc/html/phyloseq.html

# to install phyloseq:
# if (!requireNamespace("BiocManager", quietly = TRUE))
# install.packages("BiocManager")
#BiocManager::install("phyloseq")

library(qiime2R)
library(phyloseq)
library(zoo)
library(tidyverse)


##############################################
#Set UP
#
#These are the things that  we need from Qiime:
#
#sample-metadata.tsv
#core-metrics-results/rarefied_table.qza
#rooted-tree.qza
#taxonomy.qza
##############################################

setwd("D:/Dropbox/Purdue Class from 2020/2022 Spring ANSC 595 Microbiome/Project Assignment/7/core-metrics-results-day22")
list.files()

if(!dir.exists("output"))
  dir.create("output")

metadata<-read_q2metadata("2021-31_metadata_ver.4.0_day22.txt")
str(metadata)
colnames(metadata)[4] = "diet"
levels(metadata$diet)
metadata$diet.ord = factor(metadata$diet, c("Normal CP", "High-indigestible CP", "High CP"))
levels(metadata$diet.ord)
str(metadata)

row.names(metadata) <- metadata[ ,1]
#metadata <- metadata[,-1]
row.names(metadata)

##Qiime2r method of reading in the taxonomy files
taxonomy<-read_qza("taxonomy.qza")
head(taxonomy$data)

tax.clean<-parse_taxonomy(taxonomy$data)
head(tax.clean)

#All this is OK except that in future use of the taxonomy table, 
#these ASVs will be ignored because they are not classified. Why 
#are ASVs not classified? Its because there is not a close enough 
#match in the database. Just because there is not a good match in 
#the database does not mean they don’t exist, so I wanted to make 
#sure this data was not lost. So in my new code, from lines 200 ??? 224 
#I make it so that ASVs that are unclassified at any level are 
#classified as the lowest taxonomic level for which there is a 
#classification.
#Next, all these `NA` classifications with the last level that was 
#classified

tax.clean[is.na(tax.clean)] <- ""
for (i in 1:nrow(tax.clean)){
  if (tax.clean[i,2] == ""){
    kingdom <- paste("Kingdom_", tax.clean[i,1], sep = "")
    tax.clean[i, 2:7] <- kingdom
  } else if (tax.clean[i,3] == ""){
    phylum <- paste("Phylum_", tax.clean[i,2], sep = "")
    tax.clean[i, 3:7] <- phylum
  } else if (tax.clean[i,4] == ""){
    class <- paste("Class_", tax.clean[i,3], sep = "")
    tax.clean[i, 4:7] <- class
  } else if (tax.clean[i,5] == ""){
    order <- paste("Order_", tax.clean[i,4], sep = "")
    tax.clean[i, 5:7] <- order
  } else if (tax.clean[i,6] == ""){
    family <- paste("Family_", tax.clean[i,5], sep = "")
    tax.clean[i, 6:7] <- family
  } else if (tax.clean[i,7] == ""){
    tax.clean$Species[i] <- paste("Genus",tax.clean$Genus[i], sep = "_")
  }
}



#################################################################
##Taxa barplot
#################################################################

physeq <- qza_to_phyloseq(
  features="rarefied_table.qza",
  tree="rooted-tree.qza",
  taxonomy = "taxonomy.qza",
  metadata = "2021-31_metadata_ver.4.0_day22.txt"
)


#First get the OTU table from physeq
physeq_otu_table <- data.frame(otu_table(physeq), check.names = F)

tax.clean = tax.clean[row.names(tax.clean) %in% rownames(physeq_otu_table),]
metadata.filtered = metadata[row.names(metadata) %in% colnames(physeq_otu_table),]

#Assign as variables to be feed into phyloseq
OTU.physeq = otu_table(as.matrix(physeq_otu_table), taxa_are_rows=TRUE)

#our edited and formatted taxonomy table from the top of this script
tax.physeq = tax_table(as.matrix(tax.clean))    
meta.physeq = sample_data(metadata.filtered)

#We then merge these into an object of class phyloseq.

physeq_bar_plot = phyloseq(OTU.physeq, tax.physeq, meta.physeq)



# Set colors for plotting
my_colors <- c(
  '#a6cee3','#1f78b4','#b2df8a','#33a02c','#fb9a99','#e31a1c',
  '#fdbf6f','#ff7f00','#cab2d6','#6a3d9a','#ffff99','#b15928', 
  "#CBD588", "#5F7FC7", "orange","#DA5724", "#508578", "#CD9BCD",
  "#AD6F3B", "#673770","#D14285", "#652926", "#C84248", 
  "#8569D5", "#5E738F","#D1A33D", "#8A7C64", "#599861", "gray", "black"
)

#If you want different taxonomic level, find and replace the taxonomic level listed here
my_level <- c("Phylum", "Family", "Genus")
my_column <- "diet"  #this is the metadata column that we will use in the taxa barplot

#rm(taxa.summary)

abund_filter <- 0.02  # Our abundance threshold
#ml ="Genus"

for(ml in my_level){
  print(ml)
  
  taxa.summary <- physeq_bar_plot %>%
    tax_glom(taxrank = ml, NArm = FALSE) %>%  # agglomerate at `ml` level
    transform_sample_counts(function(x) {x/sum(x)} ) %>% # Transform to rel. abundance
    psmelt()  %>%                               # Melt to long format
    group_by(get(my_column), get(ml)) %>%
    summarise(Abundance.average=mean(Abundance)) 
  taxa.summary <- as.data.frame(taxa.summary)
  colnames(taxa.summary)[1] <- my_column
  colnames(taxa.summary)[2] <- ml
  
  physeq.taxa.max <- taxa.summary %>% 
    group_by(get(ml)) %>%
    summarise(overall.max=max(Abundance.average))
  
  physeq.taxa.max <- as.data.frame(physeq.taxa.max)
  colnames(physeq.taxa.max)[1] <- ml
  
  # merging the phyla means with the metadata #
  physeq_meta <- merge(taxa.summary, physeq.taxa.max)
  
  
  physeq_meta_filtered <- filter(physeq_meta, overall.max>abund_filter)
  #str(physeq_meta_filtered)
  
  physeq_meta_filtered$diet = factor(physeq_meta_filtered$diet, c("Normal CP", "High-indigestible CP", "High CP"))
  
  # Plot 
  ggplot(physeq_meta_filtered, aes(x = get(my_column), y = Abundance.average, fill = get(ml))) + 
    #facet_grid(.~LitterTreatment) +
    geom_bar(stat = "identity") +
    scale_fill_manual(values = my_colors) +
    # Remove x axis title
    #theme(axis.title.x = element_blank()) + 
    ylim(c(0,1)) +
    guides(fill = guide_legend(reverse = F, keywidth = .5, keyheight = .5, ncol = 1)) +
    theme(legend.text=element_text(size=8)) +
    #theme(legend.position="bottom") +
    theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)) +
    theme(legend.title = element_blank()) +
    
    ylab("Relative Abundance") +
    xlab(my_column) +
    ggtitle(paste0(ml, " (>", abund_filter * 100,"%) in at least 1 sample")) 
  ggsave(paste0("output/", ml, "BarPlot_", my_column, ".png"), height = 5, width = 4)
}

#################################################################
###Differential Abundance with DESeq2
#################################################################


#Adapted from https://joey711.github.io/phyloseq-extensions/DESeq2.html

#First load DESeq2.
#If you need help  with DESeq2 install, see this website
# https://bioconductor.org/packages/release/bioc/html/DESeq2.html

#if (!requireNamespace("BiocManager", quietly = TRUE))
#  install.packages("BiocManager")
#BiocManager::install("DESeq2")
library("DESeq2")

#To use DESeq, we need no zeros in our OTU table. So we will edit the table by multiplying by 2 and + 1

#First get the OTU table from physeq
physeq_otu_table <- data.frame(otu_table(physeq), check.names = FALSE)

OTU.clean2 <- physeq_otu_table + 1


#Now make the phyloseq object:


OTU.physeq = otu_table(as.matrix(OTU.clean2), taxa_are_rows=TRUE)
tax.physeq = tax_table(as.matrix(tax.clean))
meta.physeq = sample_data(metadata.filtered)


#We then merge these into an object of class phyloseq.


physeq_deseq = phyloseq(OTU.physeq, tax.physeq, meta.physeq)


#The following two lines actually do all the complicated DESeq2 work. The function phyloseq_to_deseq2 converts your phyloseq-format microbiome data into a DESeqDataSet with dispersions estimated, using the experimental design formula, also shown (the ~body.site term). The DESeq function does the rest of the testing, in this case with default testing framework, but you can actually use alternatives.


diagdds = phyloseq_to_deseq2(physeq_deseq, ~ diet)
diagdds = DESeq(diagdds, test="Wald", fitType="parametric")
#the test type of "Wald" tests for significance of coefficients in a Negative Binomial GLM. This is generally a pretty good assumption for sequencing experiments. This was designed with RNA-seq in mind, but also pretty good for 16S sequencing.


###Investigate test results table

#The following results function call creates a table of the results of the tests. Very fast. The hard work was already stored with the rest of the DESeq2-related data in our latest version of the diagdds object (see above). I then order by the adjusted p-value, removing the entries with an NA value. The rest of this example is just formatting the results table with taxonomic information for nice(ish) display in the HTML output.

#Contrast: this argument specifies what comparison to extract from the object to build a results table. There are exactly three elements:

#  1. the name of a factor in the design formula, 
#  2. the name of the numerator level for the fold change, and 
#  3. the name of the denominator level for the fold change (simplest case)

#Normal CP vs. High-indigestible CP
alpha = 0.05
my_contrast = c("diet", "Normal CP", "High-indigestible CP") 

res = results(diagdds, contrast = my_contrast, cooksCutoff = FALSE)

sigtab = res[which(res$padj < alpha), ]
#sigtab_test <- as(sigtab, "data.frame")
sigtab = cbind(as(sigtab, "data.frame"), as(tax_table(physeq_deseq)[rownames(sigtab), ], "matrix"))
#head(sigtab)


###Volcano Plot

with(res, plot(log2FoldChange, -log10(padj), pch=20, main="Volcano plot", xlim=c(-15,15)))

# Add colored points: blue if padj<0.01, red if log2FC>1 and padj<0.05)
with(subset(res, padj<.01 ), points(log2FoldChange, -log10(pvalue), pch=20, col="blue"))
with(subset(res, padj<.01 & abs(log2FoldChange)>2), points(log2FoldChange, -log10(pvalue), pch=20, col="red"))


#Let's look at the OTUs that were significantly different between the two treatment groups. The following makes a nice ggplot2 summary of the results.


theme_set(theme_bw())
scale_fill_discrete <- function(palname = "Set1", ...) {
  scale_fill_brewer(palette = palname, ...)
}
# Phylum order
#x = tapply(sigtab$log2FoldChange, sigtab$Phylum, function(x) max(x))
#x = sort(x, TRUE)
#sigtab$Phylum = factor(as.character(sigtab$Phylum), levels=names(x))
# Genus order
x = tapply(sigtab$log2FoldChange, sigtab$Genus, function(x) max(x))
x = sort(x, TRUE)
sigtab$Genus = factor(as.character(sigtab$Genus), levels=names(x))

DESeq_fig = ggplot(sigtab, aes(x=Genus, y = log2FoldChange, color=Phylum)) + 
  geom_point(size=3) + 
  ylab(paste0("(", my_contrast[2], "/", my_contrast[3], ")\n", "log2FoldChange")) +
  scale_color_manual(values = my_colors[c(4,6,8,10,12,14,16,18,20)]) +
  #ylim(0,8) +
  theme(axis.text.x = element_text(angle = -90, hjust = 0, vjust=0.2))+
theme(axis.text.x = element_text(color = "black", size = 10, family = "Times New Roman"),
      axis.text.y =element_text(color = "black", size = 12, family = "Times New Roman")) 

ggsave(paste0("output/DESeq2-", my_contrast[2], "-", my_contrast[3], ".png"), DESeq_fig, height = 6, width = 5)

#High CP vs. High-indigestible CP
alpha = 0.05
my_contrast = c("diet", "High CP", "High-indigestible CP") 

res = results(diagdds, contrast = my_contrast, cooksCutoff = FALSE)

sigtab = res[which(res$padj < alpha), ]
#sigtab_test <- as(sigtab, "data.frame")
sigtab = cbind(as(sigtab, "data.frame"), as(tax_table(physeq_deseq)[rownames(sigtab), ], "matrix"))
#head(sigtab)


###Volcano Plot

with(res, plot(log2FoldChange, -log10(padj), pch=20, main="Volcano plot", xlim=c(-15,15)))

# Add colored points: blue if padj<0.01, red if log2FC>1 and padj<0.05)
with(subset(res, padj<.01 ), points(log2FoldChange, -log10(pvalue), pch=20, col="blue"))
with(subset(res, padj<.01 & abs(log2FoldChange)>2), points(log2FoldChange, -log10(pvalue), pch=20, col="red"))


#Let's look at the OTUs that were significantly different between the two treatment groups. The following makes a nice ggplot2 summary of the results.


theme_set(theme_bw())
scale_fill_discrete <- function(palname = "Set1", ...) {
  scale_fill_brewer(palette = palname, ...)
}
# Phylum order
#x = tapply(sigtab$log2FoldChange, sigtab$Phylum, function(x) max(x))
#x = sort(x, TRUE)
#sigtab$Phylum = factor(as.character(sigtab$Phylum), levels=names(x))
# Genus order
x = tapply(sigtab$log2FoldChange, sigtab$Genus, function(x) max(x))
x = sort(x, TRUE)
sigtab$Genus = factor(as.character(sigtab$Genus), levels=names(x))

DESeq_fig = ggplot(sigtab, aes(x=Genus, y = log2FoldChange, color=Phylum)) + 
  geom_point(size=3) + 
  ylab(paste0("(", my_contrast[2], "/", my_contrast[3], ")\n", "log2FoldChange")) +
  scale_color_manual(values = my_colors[c(4,6,8,10,12,14,16,18,20)]) +
  #ylim(0,8) +
  theme(axis.text.x = element_text(angle = -90, hjust = 0, vjust=0.2))+
  theme(axis.text.x = element_text(color = "black", size = 10, family = "Times New Roman"),
        axis.text.y =element_text(color = "black", size = 12, family = "Times New Roman")) 

ggsave(paste0("output/DESeq2-", my_contrast[2], "-", my_contrast[3], ".png"), DESeq_fig, height = 6, width = 4)

#Picrust2
library(qiime2R)
library(phyloseq)
library(zoo)
library(tidyverse)

setwd("D:/Dropbox/Purdue Class from 2020/2022 Spring ANSC 595 Microbiome/Project Assignment/10 Picrust/day21")
list.files()

metadata<-read_q2metadata("2021-31_metadata_ver.4.0_day22.txt")
rownames(metadata) <- metadata$SampleID
metadata <- metadata[,-1]
str(metadata)

library("DESeq2")

physeq <- qza_to_phyloseq(
  features="pathway_abundance_day21.qza",
  metadata = "2021-31_metadata_ver.4.0_day22.txt"
)

physeq_otu_table <- data.frame(otu_table(physeq), check.names = FALSE)
OTU.clean2 <- physeq_otu_table + 1
OTU.physeq = otu_table(as.matrix(OTU.clean2), taxa_are_rows=TRUE)

meta.physeq = sample_data(metadata)

physeq_deseq = phyloseq(OTU.physeq, meta.physeq)

diagdds = phyloseq_to_deseq2(physeq_deseq, ~ diet)
diagdds = DESeq(diagdds, test="Wald", fitType="parametric")

#Normal CP vs. High-indigestible CP
alpha <- 0.05
my_contrast = c("diet", "Normal CP", "High-indigestible CP") 

res = results(diagdds, contrast = my_contrast, cooksCutoff = FALSE)

sigtab = res[which(res$padj < alpha), ]
sigtab <- as(sigtab, "data.frame")

theme_set(theme_bw())
scale_fill_discrete <- function(palname = "Set1", ...) {
  scale_fill_brewer(palette = palname, ...)
}

x = sigtab$log2FoldChange
names(x) <- row.names(sigtab)

x = sort(x, TRUE)

sigtab$pathway <- row.names(sigtab)
sigtab$pathway = factor(as.character(sigtab$pathway), levels=names(x))
str(sigtab$pathway)

DESeq_fig = ggplot(sigtab, aes(x = pathway, y = log2FoldChange)) + 
  geom_point(size=3) + 
  ylab(paste0("(", my_contrast[2], "/", my_contrast[3], ")\n", "log2FoldChange")) +
  #scale_color_manual(values = my_colors[c(4,6,8,10,12,14,16,18,20)]) +
  #ylim(0,8) +
  geom_hline(yintercept = 0) +
  geom_text(x=2, y=1, label=my_contrast[2]) +
  geom_text(x=5, y=-.75, label=my_contrast[3]) +
  theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust=0.5))+
  theme(axis.text.x = element_text(color = "black", size = 10),
        axis.text.y =element_text(color = "black", size = 12)) 

ggsave(paste0("output/DESeq2-", my_contrast[2], "-", my_contrast[3], ".png"), DESeq_fig, height = 4.5, width = 5)


#High CP vs. High-indigestible CP
alpha <- 0.05
my_contrast = c("diet", "High CP", "High-indigestible CP") 

res = results(diagdds, contrast = my_contrast, cooksCutoff = FALSE)

sigtab = res[which(res$padj < alpha), ]
sigtab <- as(sigtab, "data.frame")

theme_set(theme_bw())
scale_fill_discrete <- function(palname = "Set1", ...) {
  scale_fill_brewer(palette = palname, ...)
}

x = sigtab$log2FoldChange
names(x) <- row.names(sigtab)

x = sort(x, TRUE)

sigtab$pathway <- row.names(sigtab)
sigtab$pathway = factor(as.character(sigtab$pathway), levels=names(x))
str(sigtab$pathway)

DESeq_fig = ggplot(sigtab, aes(x = pathway, y = log2FoldChange)) + 
  geom_point(size=3) + 
  ylab(paste0("(", my_contrast[2], "/", my_contrast[3], ")\n", "log2FoldChange")) +
  #scale_color_manual(values = my_colors[c(4,6,8,10,12,14,16,18,20)]) +
  #ylim(0,8) +
  geom_hline(yintercept = 0) +
  geom_text(x=3, y=0.75, label=my_contrast[2]) +
  geom_text(x=5, y=-.75, label=my_contrast[3]) +
  theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust=0.5))+
  theme(axis.text.x = element_text(color = "black", size = 10),
        axis.text.y =element_text(color = "black", size = 12)) 

ggsave(paste0("output/DESeq2-", my_contrast[2], "-", my_contrast[3], ".png"), DESeq_fig, height = 4.5, width = 10)


## Data of d 7 can be also analyzed using the the current codes
